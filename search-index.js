var searchIndex = {};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"next_u64","","Return the next random `u64`.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",0,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,null],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",null,null],[16,"Item","","Results element type, e.g. `u32`.",1,null],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",1,null],[10,"generate","","Generate a new block of results.",1,null],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",2,null],[10,"from_seed","","Create a new PRNG using the given seed.",2,null],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",2,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[4,"ErrorKind","","Error kind which can be matched over.",null,null],[13,"Unavailable","","Feature is not available; not recoverable.",3,null],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",3,null],[13,"Transient","","A transient failure which likely can be resolved or worked around.",3,null],[13,"NotReady","","Not ready yet: recommended to try again a little later.",3,null],[3,"Error","","Error type of random number generators",null,null],[12,"kind","","The error kind",4,null],[12,"msg","","The error message",4,null],[3,"EntropyRng","","A generator provided specifically for securely seeding algorithmic generators (PRNGs).",null,null],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",null,null],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",null,null],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",null,null],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",null,null],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","DEPRECATED: use `thread_rng().gen()` instead.",null,{"inputs":[],"output":{"name":"t"}}],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",null,null],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",null,null],[3,"Standard","","A generic random value distribution. Generates values for various types with numerically uniform distribution.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",5,null],[12,"item","","The actual item which is being weighted",5,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","A distribution generating numbers within a given range.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[3,"RangeInt","","Implementation of `RangeImpl` for integer types.",null,null],[3,"RangeFloat","","Implementation of `RangeImpl` for float types.",null,null],[8,"SampleRange","","Helper trait for creating objects using the correct implementation of `RangeImpl` for the sampling type; this enables `Range::new(a, b)` to work.",null,null],[16,"Impl","","The `RangeImpl` implementation supporting type `X`.",6,null],[8,"RangeImpl","","Helper trait handling actual range sampling.",null,null],[16,"X","","The type sampled by this implementation.",7,null],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",7,null],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",7,null],[10,"sample","","Sample a value.",7,null],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",8,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"new_inclusive","","Create a new `Range` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low >= high`.",8,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample_single","","Sample a single value uniformly from `[low, high)`. Panics if `low >= high`.",8,{"inputs":[{"name":"x"},{"name":"x"},{"name":"r"}],"output":{"name":"x"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"x"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"rangeint"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"new","","",9,null],[11,"new_inclusive","","",9,null],[11,"sample","","",9,null],[11,"sample_single","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"rangefloat"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,null],[11,"new_inclusive","","",10,null],[11,"sample","","",10,null],[11,"new","","",10,null],[11,"new_inclusive","","",10,null],[11,"sample","","",10,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",12,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",13,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",14,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a.  a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sample","","",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",16,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",17,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sample","","",18,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",19,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"poisson","rand::distributions","The Poisson distribution.",null,null],[3,"Poisson","rand::distributions::poisson","The Poisson distribution `Poisson(lambda)`.",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poisson"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",20,{"inputs":[{"name":"f64"}],"output":{"name":"poisson"}}],[11,"sample","","",20,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u64"}}],[0,"binomial","rand::distributions","The binomial distribution.",null,null],[3,"Binomial","rand::distributions::binomial","The binomial distribution `Binomial(n, p)`.",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"binomial"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Binomial` with the given shape parameters `n`, `p`. Panics if `p <= 0` or `p >= 1`.",21,{"inputs":[{"name":"u64"},{"name":"f64"}],"output":{"name":"binomial"}}],[11,"sample","","",21,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u64"}}],[11,"sample","rand::distributions","Generate a floating point number in the open interval `(0, 1)` (not including either endpoint) with a uniform distribution.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f32"}}],[11,"sample","","Generate a floating point number in the open interval `(0, 1)` (not including either endpoint) with a uniform distribution.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"isize"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"i8"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"i16"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"i32"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"i64"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"i128"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"usize"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u8"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u16"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u32"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u64"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"u128"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"char"}}],[11,"sample","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"char"}}],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"bool"}}],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,null],[11,"sample","","",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[11,"sample","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"sample","rand::distributions::range","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"sample","rand::distributions::exponential","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::gamma","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",12,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","rand::distributions::normal","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",25,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",26,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",null,null],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",27,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"distiter"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",24,null],[11,"sample","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",null,null],[13,"NoTimer","","No timer available.",29,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",29,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",29,null],[13,"TinyVariantions","","Variations of deltas of time too small.",29,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",29,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"timererror"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"timererror"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","rand","",4,{"inputs":[{"name":"timererror"}],"output":{"name":"error"}}],[11,"new","rand::jitter","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",30,{"inputs":[],"output":{"generics":["jitterrng","timererror"],"name":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",30,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",30,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",30,{"inputs":[{"name":"self"}],"output":{"generics":["u8","timererror"],"name":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",30,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"i64"}}],[11,"next_u32","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",30,null],[11,"try_fill_bytes","","",30,null],[0,"mock","rand","Mock random number generator",null,null],[3,"StepRng","rand::mock","A simple implementation of `RngCore` for testing purposes.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"steprng"}}],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",31,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"self"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",31,null],[11,"try_fill_bytes","","",31,null],[0,"prng","rand","Pseudo random number generators are algorithms to produce apparently random numbers deterministically, and usually fairly quickly.",null,null],[3,"ChaChaRng","rand::prng","A cryptographically secure random number generator that uses the ChaCha algorithm.",null,null],[3,"Hc128Rng","","A cryptographically secure random number generator that uses the HC-128 algorithm.",null,null],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm.",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[0,"chacha","","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",null,null],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",null,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",32,null],[11,"try_fill_bytes","","",32,null],[11,"from_seed","","",32,null],[11,"from_rng","","",32,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",32,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",32,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"set_rounds","","Sets the number of rounds to run the ChaCha core algorithm per block to generate.",32,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"chachacore"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"generate","","",33,null],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",33,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"set_rounds","","Sets the number of rounds to run the ChaCha core algorithm per block to generate.",33,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"from_seed","","",33,null],[0,"hc128","rand::prng","The HC-128 random number generator.",null,null],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",null,null],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",null,null],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"hc128rng"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",34,null],[11,"try_fill_bytes","","",34,null],[11,"from_seed","","",34,null],[11,"from_rng","","",34,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"hc128core"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"generate","","",35,null],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",35,null],[11,"clone","rand::prng","",36,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",36,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"new_from_u64","","Creates an ISAAC random number generator using an u64 as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",36,{"inputs":[{"name":"u64"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",36,null],[11,"try_fill_bytes","","",36,null],[11,"from_seed","","",36,null],[11,"from_rng","","",36,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",37,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"new_from_u64","","Creates an ISAAC-64 random number generator using an u64 as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",37,{"inputs":[{"name":"u64"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",37,null],[11,"try_fill_bytes","","",37,null],[11,"from_seed","","",37,null],[11,"from_rng","","",37,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",38,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",38,null],[11,"try_fill_bytes","","",38,null],[11,"from_seed","","",38,null],[11,"from_rng","","",38,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`.",null,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",39,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",39,null],[11,"try_fill_bytes","","",39,null],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"generics":["vec","vec"],"name":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"fmt","rand","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `OsRng`.",40,{"inputs":[],"output":{"generics":["osrng","error"],"name":"result"}}],[11,"next_u32","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",40,null],[11,"try_fill_bytes","","",40,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `EntropyRng`.",41,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"next_u32","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",41,null],[11,"try_fill_bytes","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",42,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed","","Reseed the internal PRNG.",42,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"next_u32","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",42,null],[11,"try_fill_bytes","","",42,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",43,null],[11,"try_fill_bytes","","",43,null],[8,"Rand","","A type that can be randomly generated using an [`Rng`].",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",44,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",null,null],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",45,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"sample","","Sample a new value, using the given distribution.",45,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"t"}}],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",45,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"distiter"}}],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"gen_bool","","Return a bool with a probability `p` of being true.",45,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"choose","","Return a random element from `values`.",45,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",45,null],[11,"shuffle","","Shuffle a mutable slice in place.",45,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",45,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",45,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",45,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[8,"AsByteSliceMut","","Trait for casting types to byte slices",null,null],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",46,null],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",46,{"inputs":[{"name":"self"}],"output":null}],[8,"NewRng","","A convenient way to seed new algorithmic generators with fresh entropy from [`EntropyRng`].",null,null],[10,"new","","Creates a new instance, automatically seeded with fresh entropy.",47,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",50,null],[11,"try_fill_bytes","","",50,null],[11,"from_seed","","",50,null],[11,"from_rng","","",50,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"smallrng"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",51,null],[11,"try_fill_bytes","","",51,null],[11,"from_seed","","",51,null],[11,"from_rng","","",51,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"should_retry","","True if this kind of error may resolve itself on retry.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"should_wait","","True if we should retry but wait before retrying",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","A description of this error kind",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new instance, with specified kind and a message.",4,{"inputs":[{"name":"errorkind"},{"name":"str"}],"output":{"name":"error"}}],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",4,{"inputs":[{"name":"errorkind"},{"name":"str"},{"name":"e"}],"output":{"name":"error"}}],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",4,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}]],"paths":[[8,"RngCore"],[8,"BlockRngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleRange"],[8,"RangeImpl"],[3,"Range"],[3,"RangeInt"],[3,"RangeFloat"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Poisson"],[3,"Binomial"],[3,"Standard"],[3,"Alphanumeric"],[3,"WeightedChoice"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"DistIter"],[4,"TimerError"],[3,"JitterRng"],[3,"StepRng"],[3,"ChaChaRng"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[3,"ReadRng"],[3,"OsRng"],[3,"EntropyRng"],[3,"ReseedingRng"],[3,"ThreadRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"NewRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"SmallRng"]]};
searchIndex["rand_core"] = {"doc":"Random number generation traits","items":[[3,"Error","rand_core","Error type of random number generators",null,null],[12,"kind","","The error kind",0,null],[12,"msg","","The error message",0,null],[4,"ErrorKind","","Error kind which can be matched over.",null,null],[13,"Unavailable","","Feature is not available; not recoverable.",1,null],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",1,null],[13,"Transient","","A transient failure which likely can be resolved or worked around.",1,null],[13,"NotReady","","Not ready yet: recommended to try again a little later.",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"should_retry","","True if this kind of error may resolve itself on retry.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"should_wait","","True if we should retry but wait before retrying",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","A description of this error kind",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance, with specified kind and a message.",0,{"inputs":[{"name":"errorkind"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",0,{"inputs":[{"name":"errorkind"},{"name":"str"},{"name":"e"}],"output":{"name":"self"}}],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",0,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[0,"impls","","Helper functions for implementing `RngCore` functions.",null,null],[3,"BlockRng","rand_core::impls","Wrapper around PRNGs that implement [`BlockRngCore`] to keep a results buffer and offer the methods from [`RngCore`].",null,null],[12,"results","","",2,null],[12,"index","","",2,null],[12,"core","","",2,null],[5,"next_u64_via_u32","","Implement `next_u64` via `next_u32`, little-endian order.",null,{"inputs":[{"name":"r"}],"output":{"name":"u64"}}],[5,"fill_bytes_via_u32","","Implement `fill_bytes` via `next_u32`, little-endian order.",null,null],[5,"fill_bytes_via_u64","","Implement `fill_bytes` via `next_u64`, little-endian order.",null,null],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",null,null],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",null,null],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",null,{"inputs":[{"name":"r"}],"output":{"name":"u32"}}],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",null,{"inputs":[{"name":"r"}],"output":{"name":"u64"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"blockrng"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",2,null],[11,"try_fill_bytes","","",2,null],[11,"from_seed","","",2,null],[11,"from_rng","","",2,{"inputs":[{"name":"s"}],"output":{"generics":["error"],"name":"result"}}],[0,"le","rand_core","Little-Endian utilities",null,null],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",null,null],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",null,null],[8,"RngCore","rand_core","The core of a random number generator.",null,null],[10,"next_u32","","Return the next random `u32`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"next_u64","","Return the next random `u64`.",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[10,"fill_bytes","","Fill `dest` with random data.",3,null],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",3,null],[8,"BlockRngCore","","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",null,null],[16,"Item","","Results element type, e.g. `u32`.",4,null],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",4,null],[10,"generate","","Generate a new block of results.",4,null],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",null,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",null,null],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",5,null],[10,"from_seed","","Create a new PRNG using the given seed.",5,null],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",5,{"inputs":[{"name":"r"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Error"],[4,"ErrorKind"],[3,"BlockRng"],[8,"RngCore"],[8,"BlockRngCore"],[8,"SeedableRng"]]};
initSearch(searchIndex);
